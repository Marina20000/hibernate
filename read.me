https://howtodoinjava.com/hibernate/hibernate-c3p0-connection-pool-configuration-tutorial/
Thankfully, Hibernate is designed to use a connection pool by default,
an internal implementation. However, Hibernate’s built-in connection
pooling isn’t designed for production use. In production, we would use an external
connection pool by using either a database connection provided by JNDI or an external
connection pool configured via parameters and classpath.
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-c3p0</artifactId>
    <version>5.4.17.Final</version>
</dependency>
<dependency>
  <groupId>c3p0</groupId>
  <artifactId>c3p0</artifactId>
  <version>0.9.5.3</version>
</dependency>
<property name="hibernate.c3p0.min_size">10</property>
<property name="hibernate.c3p0.max_size">20</property>
<property name="hibernate.c3p0.acquire_increment">1</property>
<property name="hibernate.c3p0.idle_test_period">3000</property>
<property name="hibernate.c3p0.max_statements">50</property>
<property name="hibernate.c3p0.timeout">1800</property>
<property name="hibernate.c3p0.validate">1800</property>
<property name="hibernate.c3p0.unreturnedConnectionTimeout">30</property>
<property name="hibernate.c3p0.debugUnreturnedConnectionStackTraces">true</property>

Замечание: в spring-boot приложениях изпользуется по умолчанию hikari connection pool.

Замечание о транзакциях: транзакция на одно соединение может быть только одна
Из статьи 16-го года https://easyjava.ru/data/pool/ispolzovanie-pulov-soedinenij-v-hibernate/
Дело в том, что как и в случае в JDBC, Hibernate открывает ровно одно соединение с базой данных
и разрешает только одному объекту Session использовать его.
про пул соединений также есть в https://easyjava.ru/data/hibernate/hibernate-i-postgresql-primery-nastrojki/

new DriverManagerDataSource();
 Simple implementation of the standard JDBC DataSource interface, configuring a plain old
 JDBC Driver via bean properties, and returning a new Connection for every getConnection call.
NOTE: This class is not an actual connection pool; it does not actually pool Connections.
It just serves as simple replacement for a full-blown connection pool, implementing the same
standard interface, but creating new Connections on every call.
Useful for test or standalone environments outside of a J2EE container, either as a DataSource bean
in a corresponding ApplicationContext or in conjunction with a simple JNDI environment.
Pool-assuming Connection.close() calls will simply close the Connection, so any DataSource-aware
persistence code should work.
In a J2EE container, it is recommended to use a JNDI DataSource provided by the container.
Such a DataSource can be exposed as a DataSource bean in a Spring ApplicationContext via
JndiObjectFactoryBean, for seamless switching to and from a local DataSource bean like this class.
For tests, you can then either set up a mock JNDI environment through Spring's
SimpleNamingContextBuilder, or switch the bean definition to a local DataSource
(which is simpler and thus recommended).
If you need a "real" connection pool outside of a J2EE container, consider Apache's Jakarta
Commons DBCP or C3P0. Commons DBCP's BasicDataSource and C3P0's ComboPooledDataSource are full
connection pool beans, supporting the same basic properties as this class plus specific
settings (such as minimal/maximal pool size etc).

Commons DBCP's BasicDataSource can even be used as a direct replacement for an instance of this
class just by changing the class name of the bean definition to
"org.apache.commons.dbcp.BasicDataSource", because the names of all common properties match exactly.
Note that both BasicDataSource and ComboPooledDataSource should be defined with
destroy-method="close", for immediate shutdown when the Spring ApplicationContext shuts down.

Логирование всех процессов в Hibernate:   <logger name="org.hibernate" level="TRACE" />
т.е. логирование деятельности всех классов в org.hibernate

Автогенерация таблиц.
Для Postgres
hibernateProperties.setProperty("hibernate.hbm2ddl.auto", "create-drop"); - пришлось закомментировать,
т.к. в первый раз создались таблицы и последовательности, а потом не все удалялось, и
при следующих запусках с любыми параметрами были ошибки, что уже что-нибудь существует.
        validate: проверить схему, не вносить изменения в базу данных.
        update: обновить схему.
        create: создает схему, уничтожая предыдущие данные.
        create-drop: отказаться от схемы, когда SessionFactory закрывается явно, как правило, когда приложение остановлено.
Эта пропертя актуальна либо для первого запуска, либо для H2.

Entity

Все классы, которые могут быть сохранены в базе данных называются entity(сущность)
и на них налагаются определённые требования:

    Наличие публично доступного конструктора без аргументов
    Класс, его методы и сохраняемые поля не должны быть final
     Если объект Entity класса будет передаваться по значению как отдельный объект (detached object), например через удаленный интерфейс (through a remote interface), он так же должен реализовывать Serializable интерфейс.
    Сохраняемые поля должны быть доступны только с использованием методов класса.

Эти требования в точности соответствуют требованиям JPA.

Каждый сохраняемый класс помечается аннотацией @Entity, говорящей Hibernate,
что этот класс является сущностью. Помимо того, в каждом классе, помеченном @Entity
должно быть поле, имеющее аннотацию @Id, говорящее Hibernate, что это поле может быть
использовано как первичный ключ в базе данных и что по значению этого поля Hibernate
может отличать один объект от другого. Честно говоря, полей с @Id может быть несколько
и механизм первичного ключа несколько сложнее.

Автогенерация ключей
https://habr.com/ru/company/haulmont/blog/653843/
еще по автогенерации и составным ключам https://javascopes.com/hibernate-identifiers-c815d505/
GenerationType.IDENTITY:
    @Id
    @GeneratedValue (strategy = GenerationType.IDENTITY)//это генерация идентичности
    private long studentId;    //при этой стратегии отключено пакетное обновление!!!!!

  GenerationType.SEQUENCE: Самый быстрый способ!!! Многократно быстрее остальных!!!!!
  рекомендуемый способ генерации. Поддерживается Postgres, Oracle. Не поддерживается MySql
  @Id//sequenceName = "JPA_SEQUENCE" - последовательность будет сгенерирована сама,
  //не обязательно ее указывать.
  @SequenceGenerator( name = "jpaSequence", sequenceName = "JPA_SEQUENCE", allocationSize = 1, initialValue = 1 )
  @GeneratedValue( strategy = GenerationType.SEQUENCE, generator = "jpaSequence")
  Можно и так определить:
      @Id
      @GeneratedValue(generator = "sequence-generator")
      @GenericGenerator(
        name = "sequence-generator",
        strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator",
        parameters = {
          @Parameter(name = "sequence_name", value = "user_sequence"),
          @Parameter(name = "initial_value", value = "4"),
          @Parameter(name = "increment_size", value = "1")
          }
      )
      private long userId;
Сгенерированные значения уникальны для каждой последовательности. Если вы не укажете имя последовательности,
Hibernate будет повторно использовать один и тот же hibernate_sequence для разных типов.

GenerationType.TABLE:
    @Id
    @GeneratedValue(strategy = GenerationType.TABLE,
      generator = "table-generator")
    @TableGenerator(name = "table-generator",
      table = "dep_ids",
      pkColumnName = "seq_id",
      valueColumnName = "seq_value")
    private long depId;
    Недостатком этого метода является то, что он плохо масштабируется и может негативно повлиять на производительность.

GenerationType.AUTO  согласно документации, отдается на откуп по реализации базе данных

Пользовательский генератор
Если мы не хотим использовать ни одну из готовых стратегий, мы можем определить наш пользовательский генератор,
реализовав интерфейс IdentifierGenerator.
public class MyGenerator
  implements IdentifierGenerator, Configurable {
    private String prefix;
    @Override
    public Serializable generate(
      SharedSessionContractImplementor session, Object obj)
      throws HibernateException {
        String query = String.format("select %s from %s",
            session.getEntityPersister(obj.getClass().getName(), obj)
              .getIdentifierPropertyName(),
            obj.getClass().getSimpleName());
        Stream ids = session.createQuery(query).stream();
        Long max = ids.map(o -> o.replace(prefix + "-", ""))
          .mapToLong(Long::parseLong)
          .max()
          .orElse(0L);
        return prefix + "-" + (max + 1);
    }
    @Override
    public void configure(Type type, Properties properties,
      ServiceRegistry serviceRegistry) throws MappingException {
        prefix = properties.getProperty("prefix");
    }
}
@Entity
public class Product {
    @Id
    @GeneratedValue(generator = "prod-generator")
    @GenericGenerator(name = "prod-generator",
      parameters = @Parameter(name = "prefix", value = "prod"),
      strategy = "com.baeldung.hibernate.pojo.generator.MyGenerator")
    private String prodId;
}

Производные Идентификаторы
Производные идентификаторы получаются из ассоциации сущности с помощью аннотации @MapsId .
@Entity
public class UserProfile {
    @Id
    private long profileId;
    @OneToOne
    @MapsId
    private User user;
}
@Test
public void whenSaveDerivedIdEntity_thenOk() {
    User user = new User();
    session.save(user);
    UserProfile profile = new UserProfile();
    profile.setUser(user);
    session.save(profile);
    assertThat(profile.getProfileId()).isEqualTo(user.getUserId());
}


Как написано в руководстве разработчика, если мы выставляем тип ID, отличный от UUID
(Long, Integer и т. д.) и используем стратегию генерации AUTO, то Hibernate (начиная с версии 5.0)
сделает следующее:
    Попробует использовать стратегию SEQUENCE.
    Если БД не поддерживает последовательности (например, MySQL), то будет использоваться стратегия
    TABLE (или IDENTITY, в версии до 5.0).
Почему Hibernate сначала пытается использовать SEQUENCE? Основная причина – производительность.
Как уже говорилось, TABLE обладает наихудшей производительностью (хотя самой большой
совместимостью с СУБД). Есть статья, в которой автор сравнивает разные стратегии генерации ID,
сохраняя 10 000 сущностей в БД. Ему удалось добиться уменьшения времени со 185 секунд до 4.3,
когда он начал использовать SEQUENCE вместо IDENTITY и включил некоторые оптимизации (такие,
как пакетная обработка данных). Таким образом, обе стратегии: IDENTITY и TABLE будут работать,
но производительность пострадает.
Самое интересное, что даже SEQUENCEв конфигурации по умолчанию не будет работать быстро,
производительность будет близка к IDENTITY. Это происходит из-за того, что используется
всего одна последовательность, а ее параметры не позволяют использовать кэширование ID
средствами Hibernate. Мы подробнее поговорим об этом чуть позже.
Итого: если для генерации ID оставить значения по умолчанию, то, скорее всего, это негативно
повлияет на производительность приложения. Для «боевого» применения будет лучше более тонко
настроить стратегии генерации.
Sequence: как правильно готовить?
Стратегия SEQUENCE использует специализированный объект БД – последовательность (sequence)
для генерации уникального значения ID сущности и это значение присваивается до сохранения
(и это важно!) сущности в БД. Такой алгоритм обеспечивает возможность пакетного (batch)
сохранения данных. Это происходит за счет того, что приложению не надо перезапрашивать из базы
значение ID после сохранения каждой записи, как это происходит в случае использования identity
столбцов, триггеров и т. д.
А если ничего не настраивать?
Чтобы использовать последовательность для генерации первичного ключа, все, что нам нужно –
написать код, представленный ниже. По факту это то, что сделает стратегия `AUTO`, если наша БД
поддерживает последовательности.
@Id
@GeneratedValue(strategy = GenerationType.SEQUENCE)
@Column(name = "id", nullable = false)
private Long id;
Если мы включим автоматическое создание схемы БД и показ выполняемых запросов в Hibernate,
то мы увидим что-то такое:
create sequence hibernate_sequence start 1 increment 1;
JPA провайдер будет использовать только эту последовательность для всех операторов `INSERT`,
сгенерированных для сущностей с настройками стратегии `SEQUENCE` по умолчанию. И это может привести
к неприятным последствиям.
Во-первых, значения в последовательности могут просто
закончиться. В большинстве БД максимальное количество значений
последовательности – 2^63-1, исчерпать такое количество значений, конечно,
сложновато. Но все возможно, если ваше приложение генерирует огромное
количество данных; например, у вас огромное количество IoT устройств, постоянно
присылающих замеры или баннерная сеть, которая генерирует миллионы
кликов-событий каждый день.
2^63-1 – большое число
Во-вторых, будет страдать производительность. По умолчанию, мы увеличиваем значение
последовательности на 1 и это не позволяет использовать оптимизацию выборки значений в Hibernate.
Для каждого сохраняемого объекта ORM вынужден делать запрос в базу. Например, если мы попробуем
сохранить пару объектов, то в логах Hibernate увидим примерно следующее:
select nextval ('hibernate_sequence')
insert into pet (name, id) values (?, ?)
select nextval ('hibernate_sequence')
insert into pet (name, id) values (?, ?)
Можно заметить, что у нас появляются накладные расходы: для каждой операцию вставки мы делаем
дополнительную выборку из БД. И это, очевидно, будет влиять на скорость вставки данных в базу.
Итого: Значения по умолчанию для стратегии `SEQUENCE` неплохо работают для приложений, которые
не генерируют большой объем данных. Если нам нужно больше производительности, и меньше проблем
с единственной последовательностью, то нужно менять параметры генерации ID.
Что мы можем настроить?
Начнем с простого: назначим отдельную последовательность для генерации ID для сущности.
@Id
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pet_seq")
@Column(name = "id", nullable = false)
private Long id;
Если опять заглянем в логи Hibernate, увидим следующий SQL:
create sequence pet_seq start 1 increment 50
Если не используется последовательность по умолчанию, Hibernate «кэширует» значения ID при
выборке из последовательности. Идея в том, чтобы при одном запросе «захватить» какой-то диапазон
значений и потом назначать значения ID из этого диапазона. По умолчанию, Hibernate захватывает
50 значений.
Оптимизация работает так:
    Шаг 1: Hibernate выполняет один SELECT из последовательности и получает текущее значение.
    Шаг 2: Если это значение равно начальному значению, с которым создавалась последовательность,
    то Hibernate выбирает следующее значение ID, и назначает это значение верхней границей
    диапазона. А значение, выбранное на шаге 1 – нижней границей. В противном случае переходим
    к шагу 4.
    Шаг 3: Вставляем данные, назначаем ID, начиная с нижнейграницы до верхней, пока не закончатся
    значения.
    Шаг 4: Выбираем следующее значение ID из последовательности (оно больше, чем начальное).
    В этом случае Hibernate вычисляет доступный диапазон, используя параметр allocationSize.
    Нижняя граница = ID – allocationSize+1, верхняя = ID. Дальше переходим к шагу 3.
Итого, мы делаем только два запроса `SELECT` чтобы сохранить первые 50 сущностей. Для следующих
50-ти нам нужно будет сделать только один дополнительный запрос. Если опять заглянем в логи
Hibernate, то увидим:

select nextval ('pet_seq'); //получаем 1 – начальное значение, нужно ещё одно
select nextval ('pet_seq'); //получаем 51 – верхнюю границу диапазона
insert into pet (name, id) values (?, ?);// id=1
insert into pet (name, id) values (?, ?);//id=2
//сохраняем остальные 48 сущностей
select nextval ('pet_seq'); //выбираем 101, это верхняя граница, нижняя равна 101 – 50+1 = 52
insert into pet (name, id) values (?, ?);//id=52
//и т. д.

В этом подходе есть один недостаток: если мы закрываем сессию с базой данных (приложение
перезапустилось или мы пересоздаем entity manager), то неиспользованные значения будут потеряны
навсегда. Хороший пример такого короткоживущего приложения – serverless lambda. Если сохраняем
только одну сущность за запуск, то остальные 49 значений теряем. Это может привести к более
быстрому окончанию значений в последовательности, поэтому для коротких сессий нужно уменьшать
шаг последовательности, чтобы не терять много ID.
Для настройки параметров генерации ID, например, для уменьшения шага последовательности,
используется аннотация @SequenceGenerator. Эта аннотация позволяет нам задать необходимые
параметры для генерации последовательности в БД: название, начальное значение и шаг. Код ниже
показывает, как создать последовательность с шагом 20.
@Id
@SequenceGenerator(name = "pet_seq",
        sequenceName = "pet_sequence",
        initialValue = 1, allocationSize = 20)
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pet_seq")
@Column(name = "id", nullable = false)
private Long id;

Hibernate сгенерирует и выполнит вот такой вот SQL, если последовательности нет в БД:
create sequence pet_sequence start 1 increment 20
При определении генератора таким способом нужно помнить следующее: если мы хотим использовать
существующую последовательность, то параметр allocationSize должен в точности совпадать с шагом
последовательности. Если в Hibernate включена валидация схемы, то приложение не запустится, если
значения не совпадают.
Отключить валидацию схемы можно, установив параметр hibernate.id.sequence.increment_size_mismatch_strategy
в значение LOG или FIX.
Для значения LOGHibernate проигнорирует несовпадение значений параметров генератора и
последовательности, и это может привести к нарушениям уникальности при генерации ID. Например,
если для генератора значение allocationSize равно 20, а в последовательности параметр increment
равен 1, то мы получим что-то такое:

select nextval ('pet_seq'); // выбираем 1 начальное значение, нужно выбрать следующее
select nextval ('pet_seq'); //выбираем 2 – конечное значение диапазона
insert into pet (name, id) values (?, ?);// id=1
insert into pet (name, id) values (?, ?);//id=2
//Закончился диапазон, выбираем следующее
select nextval ('pet_seq'); //выбираем 3 конечное значение, считаем 3 – 20 + 1 = -16 - начальное
insert into pet (name, id) values (?, ?);//id=-16
insert into pet (name, id) values (?, ?);//id=-15
//Новая сессия
select nextval ('pet_seq'); //выбираем 4 – конечное значение, считаем 4 – 20 + 1 = -15 - начальное
insert into pet (name, id) values (?, ?);//id=-15 нарушение уникальности

Если поставим значение параметра - FIX, то в этом случае Hibernate автоматически поменяет
значение allocationSize и выставит его равным шагу последовательности, т.е. для нашего случая
выше будет установлена 1.
Еще одна штука, которую можно использовать при определении @SequenceGenerator - можно
переиспользовать одну последовательность для разных сущностей. Нужно просто указать одинаковые
значения в sequenceName для разных генераторов.

//ID Definition for ‘Pet’ entity
@Id
@SequenceGenerator(name = "pet_seq", sequenceName = "common_sequence")
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pet_seq")
@Column(name = "id", nullable = false)
private Long id;

//ID Definition for ‘Owner’ entity
@Id
@SequenceGenerator(name = "owner_seq", sequenceName = " common_sequence ")
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "owner_seq")
@Column(name = "id", nullable = false)
private Long id;

Итого: явное задание генераторов позволяет нам:
    Пользоваться оптимизацией выборки ID для лучшей производительности.
    Настраивать размер пула ID в зависимости от количества вставляемых данных.
    Использовать одну и ту же последовательность для ID разных сущностей.
И, похоже, что стратегия SEQUENCE практически идеальна. Но и на солнце бывают пятна…
Несколько клиентов для одной базы – это проблема?
Несмотря на то, что SEQUENCE использует БД для генерации ID, но присваивание значений производится
в коде приложения. С одной стороны, это дает нам оптимизации и пакетные вставки данных,
но с другой стороны другие приложения, которые используют ту же самую БД, даже не подозревают,
что им нужно использовать определенную последовательность для генерации значений первичных ключей.
Это может привести к тому, что другие приложения назначают ID в соответствии со своими соображениями
и полностью игнорируют последовательность. В итоге, мы можем запросто получить нарушения
уникальности первичного ключа, как в нашем приложении, так и в соседних.
Итого: Стратегия SEQUENCE для генерации ID может не очень хорошо себя показывать, если несколько
клиентов работают с одной и той же базой. В таких случаях единственно надежный способ –
генерация ID при вставке в базу. И здесь гораздо лучше работает стратегия IDENTITY.
Identity: за и против
IDENTITY - это, наверное, самая распространенная стратегия среди разработчиков, использующих
MySQL. Но, кроме MySQL, многие СУБД поддерживают аналогичный механизм: специальный тип данных
столбца таблицы, которые автоматом назначает уникальные значения вставляемым строкам. Так что
эту стратегию можно видеть в большом количестве приложений. Иногда разработчики руководствуются
принципом «работало на предыдущих проектах» при выборе этой стратегии в новых приложениях.
Мало кто хочет менять привычки, которые не подводили. Когда мы определяем стратегию IDENTITY
для генерации значений ID, мы получаем надежный способ обеспечения уникальности первичного ключа,
(почти) не зависящий от клиентов БД.
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
@Column(name = "id", nullable = false)
private Long id;
Для каждого оператора INSERT, база данных автоматически генерирует уникальное значение ID поля.
Хотя в некоторых СУБД, если мы указываем значение ID явно, то оно не будет перезаписано, так что,
в теории, несколько клиентов могут получить нарушение уникальности, если они назначают значения
ID явно.
Поведение стратегии IDENTITY схоже с SEQUENCE, если мы определим шаг последовательности равным 1.
Но есть одно значительное различие. Нужно помнить, что для назначения ID данные должны быть
физически вставлены в таблицу. И только после того, как оператор INSERT выполнился, мы сможем
узнать значение ID. Следовательно, JPA провайдер должен каким-то образом вернуть это значение
обратно в приложение после сохранения объекта в БД.
Возникает вопрос: а как ORM выбирает значение ID после вставки? Если JDBC драйвер БД поддерживает
JDBC v.3 (а современные БД поддерживают), это делается автоматически. JPA провайдер неявно
вызывает метод Statement.getGeneratedValues(), который и возвращает сгенерированное значение.
Под капотом при вставке данных вызывается примерно такой SQL:
insert into pet (name) values (‘Buddy’) RETURNING *
А что будет, если у нас старый драйвер? В этом случае JPA провайдер может попытаться выполнить
дополнительный запрос самостоятельно (а зачастую нам придется делать это вручную), чтобы на
основании сохраненных данных получить значение ID. Ну вот, например, как это может выглядеть
для старой версии PostgreSQL. В PostgreSQL тип IDENTITY эмулируется через последовательность,
но принцип будет примерно таким же в случае использования других СУБД:
insert into pet (name) values (?)
select currval('pet_id_seq')
insert into pet (name) values (?)
select currval('pet_id_seq')
Использование IDENTITY не позволяет использовать пакетную вставку данных. Поскольку ORM должен
получать ID после каждой вставки (вне зависимости от версии JDBC драйвера), то он (ORM)
разбивает сохранение массива объектов на отдельные вызовы INSERT. Мы просто не можем себе
позволить отправить список объектов на сохранение в БД и получить массив ID взамен. БД не
гарантирует порядок вставки для пакетных операций, так что ID могут быть не в том порядке,
в котором был наш список объектов. Следовательно, нельзя будет надежно сопоставить значение
ключа с объектом, а это есть критическая часть работы JPA. Так что единственный выход – сохранять
по одному объекту.
Итого: стратегия IDENTITY проста в использовании и позволяет надежно получать уникальные ID вне
зависимости от клиентов, использующих БД.
С другой стороны, данная стратегия не позволяет использовать пакетное сохранение данных,
а производительность обычных операций вставки также может быть чуть ниже, чем при использовании
последовательностей. Следовательно, рекомендуется использовать IDENTITY для случаев, когда
мы сохраняем небольшой объем данных или когда есть риск, что одна и та же база данных используется
несколькими приложениями, которые могут туда писать данные.
Подведем итоги: Identity vs Sequence vs остальное
Итак, какую же стратегию выбрать для генерации ID для наших JPA сущностей? Вот пара рекомендаций.
В первую очередь рассмотрите `SEQUENCE`. Эта стратегия обеспечивает самую высокую производительность
в сравнении с остальными. Также нужно обратить внимание на следующее:
    Хорошей практикой считается задание отдельной последовательности для каждой сущности. Нужно
    избегать использования значений по умолчанию в настройках.
    Используйте `@SequenceGenerator` для тонкой настройки генерации значений ID и параметров
    генерируемой последовательности.
    Шаг последовательности задавайте в соответствии с нагрузкой приложения.
Использование `IDENTITY` оправдано, если:
    СУБД не поддерживает последовательности.
    Создается небольшой объем данных.
    В базу данных могут писать другие приложения.
По возможности старайтесь не использовать стратегии TABLE and AUTO, с ними будет наихудшая
производительность.
Конечно, список всех возможных ID не только исчерпывается простыми полями, значения которых
генерируются на сервере БД. В следующих статьях мы обсудим генерацию ID в коде приложения
(особенно UUID). Также, хотя это и не очень распространенный случай, поговорим о составных ID,
там тоже есть что обсудить.

Отношения.
1) @OneToMany лучше реализовать как bidirectional:
@ManyToOne might be just enough
Just because you have the option of using the @OneToMany annotation, it does not mean this should be the default option for every one-to-many database relationship. The problem with collections is that we can only use them when the number of child records is rather limited.
    Therefore, in reality, @OneToMany is practical only when many means few. Maybe @OneToFew would have been a more suggestive name for this annotation.
Bidirectional @OneToMany associations are way better than unidirectional ones because they rely on the @ManyToOne relationship, which is always efficient in terms of generated SQL statements.
But then, even if they are very convenient, you don’t always have to use collections. The @ManyToOne association is the most natural and also efficient way of mapping a one-to-many database relationship.

https://habr.com/ru/company/haulmont/blog/547514/   краткий обзор JpaBuddy


CACHE
Strategy/Provider	Read-only	Nonstrictread-write	Read-write	Transactional
EHCache             	X	              X	            X
OSCache	                X	              X	            X
SwarmCache	            X	              X
JBoss Cache	            X	 	                                      X

Еще одна важная деталь про кеш второго уровня про которую стоило бы упомянуть —
хибернейт не хранит сами объекты Ваших классов. Он хранит информацию в виде массивов строк, чисел и т. д.
И идентификатор объекта выступает указателем на эту информацию. Концептуально это нечто вроде Map,
в которой id объекта — ключ, а массивы данных — значение. Приблизительно можно представить себе это так:
1 -> { "Pupkin", 1, null , {1,2,5} }

Помимо вышесказанного, следует помнить — зависимости Вашего класса по умолчанию также не кешируются. Например, если рассмотреть класс выше — SharedDoc, то при выборке коллекция users будет доставаться из БД, а не из кеша второго уровня. Если Вы хотите также кешировать и зависимости, то класс должен выглядеть так:
@Entity
@Table(name = "shared_doc")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class SharedDoc{
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    private Set<User> users;    Для коллекций надо явно указывать, что они должны тянуться из кеша!!!!
}
И последняя деталь — чтение из кеша второго уровня происходит только в том случае,
если нужный объект не был найден в кеше первого уровня.
Чтобы искать именно в кеше, надо ставить параметры:
query.setCacheable(true);
query.setCacheRegion("phone");

 Cache Concurrency Strategy
Based on use cases, we are free to pick one of the following cache concurrency strategies:

READ_ONLY: Used only for entities that never change (exception is thrown if an attempt to update such an entity is made). It is very simple and performant. Very suitable for some static reference data that don't change
NONSTRICT_READ_WRITE: Cache is updated after a transaction that changed the affected data has been committed. Thus, strong consistency is not guaranteed and there is a small time window in which stale data may be obtained from cache. This kind of strategy is suitable for use cases that can tolerate eventual consistency
READ_WRITE: This strategy guarantees strong consistency which it achieves by using ‘soft' locks: When a cached entity is updated, a soft lock is stored in the cache for that entity as well, which is released after the transaction is committed. All concurrent transactions that access soft-locked entries will fetch the corresponding data directly from database
TRANSACTIONAL: Cache changes are done in distributed XA transactions. A change in a cached entity is either committed or rolled back in both database and cache in the same XA transaction

Liquibase: https://www.baeldung.com/liquibase-refactor-schema-of-java-app,
https://habr.com/ru/post/436994/?